{{>header}}

import React from 'react';
import { createContext, useContext, ReactNode } from 'react';
import { QueryClientProvider, QueryClientProviderProps } from 'react-query';
{{#if packageNames.client}}
import { {{{clientName}}} } from '{{{packageNames.client}}}';
{{else}}
import { {{{clientName}}} } from './{{{clientName}}}';
{{/if}}

interface {{{pascalCase clientName}}}ContextState {
	client: {{{clientName}}}
}
const {{{pascalCase clientName}}}Context = createContext<{{{pascalCase clientName}}}ContextState | null>(null)

export const use{{{pascalCase clientName}}} = () => {
	const context = useContext({{{pascalCase clientName}}}Context)
	if (!context) {
    	throw new Error("use{{{pascalCase clientName}}} must be used within a {{{pascalCase clientName}}}Provider")
	}
	return context
}

interface {{{pascalCase clientName}}}ProviderProps {
	baseUrl: string
	queryClientProviderProps: QueryClientProviderProps
	children: ReactNode
	/**
	* Authentication token
	*/
	apiKey?: string
	/**
	* PublishableApiKey identifier that defines the scope of resources
	* available within the request
	*/
	publishableApiKey?: string
}

export const {{{pascalCase clientName}}}Provider = ({
	queryClientProviderProps,
	baseUrl,
	{{!-- apiKey,
	publishableApiKey,--}}
	children,
}: {{{pascalCase clientName}}}ProviderProps) => {
	const client = new {{{clientName}}}({
		BASE: baseUrl,
		WITH_CREDENTIALS: true,
	})
	return (
		<QueryClientProvider {...queryClientProviderProps}>
			<{{{pascalCase clientName}}}Context.Provider value={ { client } }>
				{children}
			</{{{pascalCase clientName}}}Context.Provider>
		</QueryClientProvider>
	)
}
